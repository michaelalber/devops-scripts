#!/usr/bin/env bash
#
# CentOS 7 LEMP Stack - PHP 5.6
# PHP 5.6 unsupported as of December 31, 2018
#
# Based on a template by BASH3 Boilerplate v2.3.0
# http://bash3boilerplate.sh/#authors
#
# The MIT License (MIT)
# Copyright (c) 2013 Kevin van Zonneveld and contributors
# You are not obligated to bundle the LICENSE file with your b3bp projects as long
# as you leave these references intact in the header comments of your source files.

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
# set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# Set magic variables for current file, directory, os, etc.
__dir="$(cd "$(dirname "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")"
__base="$(basename "${__file}" .sh)"


# Define the environment variables (and their defaults) that this script depends on
LOG_LEVEL="${LOG_LEVEL:-6}" # 7 = debug -> 0 = emergency
NO_COLOR="${NO_COLOR:-}"    # true = disable color. otherwise autodetected

# Default MySQL (root) Password
MYSQLPASSWORD="2HmwD2-eH+*D&r=m38*zMBss?"


### Functions
##############################################################################

function __b3bp_log () {
  local log_level="${1}"
  shift

  # shellcheck disable=SC2034
  local color_debug="\x1b[35m"
  # shellcheck disable=SC2034
  local color_info="\x1b[32m"
  # shellcheck disable=SC2034
  local color_notice="\x1b[34m"
  # shellcheck disable=SC2034
  local color_warning="\x1b[33m"
  # shellcheck disable=SC2034
  local color_error="\x1b[31m"
  # shellcheck disable=SC2034
  local color_critical="\x1b[1;31m"
  # shellcheck disable=SC2034
  local color_alert="\x1b[1;33;41m"
  # shellcheck disable=SC2034
  local color_emergency="\x1b[1;4;5;33;41m"

  local colorvar="color_${log_level}"

  local color="${!colorvar:-${color_error}}"
  local color_reset="\x1b[0m"

  if [[ "${NO_COLOR:-}" = "true" ]] || [[ "${TERM:-}" != "xterm"* ]] || [[ ! -t 2 ]]; then
    if [[ "${NO_COLOR:-}" != "false" ]]; then
      # Don't use colors on pipes or non-recognized terminals
      color=""; color_reset=""
    fi
  fi

  # all remaining arguments are to be printed
  local log_line=""

  while IFS=$'\n' read -r log_line; do
    echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" "${log_level}")${color_reset} ${log_line}" 1>&2
  done <<< "${@:-}"
}

function emergency () {                                __b3bp_log emergency "${@}"; exit 1; }
function alert ()     { [[ "${LOG_LEVEL:-0}" -ge 1 ]] && __b3bp_log alert "${@}"; true; }
function critical ()  { [[ "${LOG_LEVEL:-0}" -ge 2 ]] && __b3bp_log critical "${@}"; true; }
function error ()     { [[ "${LOG_LEVEL:-0}" -ge 3 ]] && __b3bp_log error "${@}"; true; }
function warning ()   { [[ "${LOG_LEVEL:-0}" -ge 4 ]] && __b3bp_log warning "${@}"; true; }
function notice ()    { [[ "${LOG_LEVEL:-0}" -ge 5 ]] && __b3bp_log notice "${@}"; true; }
function info ()      { [[ "${LOG_LEVEL:-0}" -ge 6 ]] && __b3bp_log info "${@}"; true; }
function debug ()     { [[ "${LOG_LEVEL:-0}" -ge 7 ]] && __b3bp_log debug "${@}"; true; }

function help () {
  echo "" 1>&2
  echo " ${*}" 1>&2
  echo "" 1>&2
  echo "  ${__usage:-No usage available}" 1>&2
  echo "" 1>&2

  if [[ "${__helptext:-}" ]]; then
    echo " ${__helptext}" 1>&2
    echo "" 1>&2
  fi

  exit 1
}

# Update Linux and install essential packages
info "Update Linux and install essential packages"
yum update -y

info "Linux EPEL and REMI"
yum install -y epel-release
yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm

info "Basic tools"
yum install -y yum-utils gcc make python3 gcc-c++ git

info "Install PHP 5.6"
yum-config-manager --enable remi-php56
yum install -y php

info "Install NodeJS and Yarn"
yum install -y nodejs
npm install yarn -g

info "Enable and Install Nginx"
yum install -y nginx
systemctl start nginx
systemctl enable nginx

info "Install Mariadb"
yum localinstall -y https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm
yum -y install mysql-community-server

systemctl start mysqld
systemctl enable mysqld

info "Setting MySQL root password..."
TEMPPASSTR=$(grep "temporary password" /var/log/mysqld.log)
MYSQLCURPASS=$(echo $TEMPPASSTR| rev | cut -d ' ' -f1 | rev)

/usr/bin/mysqladmin --user=root --password=$MYSQLCURPASS password $MYSQLPASSWORD

# Allow access to the database from outside the VM (DataGrip or other tool)
SQLCOMMAND="GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '$MYSQLPASSWORD' WITH GRANT OPTION; FLUSH PRIVILEGES;"
mysql --user=root --password=$MYSQLPASSWORD --execute="$SQLCOMMAND" 2>&1 | grep -v "mysql: [Warning] Using a password on the command line interface can be insecure."

info "Install additional PHP packages"
yum install -y php-common php-gd php-fpm php-dom php-mbstring php-opcache php-curl php-xml php-fileinfo php-json php-sqlite3 php-zip php-ctype php-mysqlnd php-devel php-cli wget unzip git

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php composer-setup.php --install-dir=/usr/local/bin --filename=composer

# For Linux root user, add the /usr/local/bin path
echo "export PATH=$PATH:/usr/local/bin" > /etc/profile.d/custom.sh

info "Install xDebug"
yum install -y php-xdebug

cp /vagrant/xdebug.ini /etc/php.d/xdebug.ini

info "Clean YUM cache"
yum clean metadata

# Nginx config file
cp /vagrant/acmesite.conf /etc/nginx/conf.d/acmesite.conf

info  "Configuring PHP-FPM"
sed -i "s/;listen.owner = .*/listen.owner = apache/g" /etc/php-fpm.d/www.conf
sed -i "s/;listen.group = .*/listen.group = nginx/g" /etc/php-fpm.d/www.conf
sed -i "s/;listen.mode = .*/listen.mode = 0660/g" /etc/php-fpm.d/www.conf
sed -i "s/listen = 127.0.0.1:9000/listen = \/var\/run\/php-fpm\/php-fpm.sock/g" /etc/php-fpm.d/www.conf
echo "cgi.fix_pathinfo=0" >> /etc/php.ini

systemctl enable php-fpm.service
systemctl start php-fpm.service

info  "Enabling and Starting Nginx...";
systemctl enable nginx
systemctl start nginx

